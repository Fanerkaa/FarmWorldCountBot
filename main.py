import telebot
import config
from telebot import types
import requests
from bs4 import BeautifulSoup

bot = telebot.TeleBot(config.token)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–¶–µ–Ω–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã")
    btn2 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É TON üíé")
    btn3 = types.KeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON üíé")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É Farm World!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '–¶–µ–Ω–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã':
        bot.send_message(message.from_user.id, f'ü™µ 1 –î–µ—Ä–µ–≤–æ - {config.wood} TON üíé\nüçñ 1 –ú—è—Å–æ - {config.meat} TON üíé\nüí∞ 1 –ó–æ–ª–æ—Ç–æ - {config.gold} TON üíé', parse_mode='Markdown')

    elif message.text == '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É TON üíé':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É CoinMarketCap –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ TON
        response = requests.get('https://coinmarketcap.com/ru/currencies/toncoin/')
        soup = BeautifulSoup(response.content, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã TON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        data_group = soup.find('span', {'class': 'sc-65e7f566-0 clvjgF base-text'})
        if data_group:
            TON_crypto_value = data_group.text
            TON_crypto_equivalent = float(TON_crypto_value.replace('‚ÇΩ', ''))
            bot.send_message(message.from_user.id, f'üíé TON : {TON_crypto_equivalent} RUB')
        else:
            bot.send_message(message.from_user.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")

    elif message.text == '–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON üíé':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤–∞, –º—è—Å–∞ –∏ –∑–æ–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–µ—Ä–µ–≤–æ/–ú—è—Å–æ/–ó–æ–ª–æ—Ç–æ")

    else:
        calculate_ton(message)

def calculate_ton(message):
    if "/" in message.text:
        resources = message.text.split("/")
        if len(resources) == 3:
            try:
                tree = float(resources[0])
                meat = float(resources[1])
                gold = float(resources[2])
                total_ton = tree * config.wood + meat * config.meat + gold * config.gold
                bot.send_message(message.from_user.id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON üíé: {total_ton}")
            except ValueError:
                bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        else:
            bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤–∞, –º—è—Å–∞ –∏ –∑–æ–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–µ—Ä–µ–≤–æ/–ú—è—Å–æ/–ó–æ–ª–æ—Ç–æ")
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤–∞, –º—è—Å–∞ –∏ –∑–æ–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–µ—Ä–µ–≤–æ/–ú—è—Å–æ/–ó–æ–ª–æ—Ç–æ")

bot.polling(none_stop=True, interval=0)
